FileNames = {'data_structure_ANM210861_20130701.mat'... 
    'data_structure_ANM210861_20130702.mat'... 
    'data_structure_ANM210861_20130703.mat'... 
    'data_structure_ANM210862_20130626.mat'... 
    'data_structure_ANM210862_20130627.mat'... 
    'data_structure_ANM210862_20130628.mat'... 
    'data_structure_ANM210863_20130626.mat'... 
    'data_structure_ANM210863_20130627.mat'...
    'data_structure_ANM210863_20130628.mat'... 
    'data_structure_ANM214427_20130805.mat'... 
    'data_structure_ANM214427_20130806.mat'... 
    'data_structure_ANM214427_20130807.mat'... 
    'data_structure_ANM214427_20130808.mat'... 
    'data_structure_ANM214429_20130805.mat'... 
    'data_structure_ANM214429_20130806.mat'... 
    'data_structure_ANM214429_20130807.mat'... 
    'data_structure_ANM214429_20130808.mat'... 
    'data_structure_ANM214430_20130820.mat'... 
    'data_structure_ANM214430_20130821.mat'... 
    'data_structure_ANM214430_20130822.mat'... 
    'data_structure_ANM214430_20130823.mat'... 
    'data_structure_ANM218453_20131014.mat'... 
    'data_structure_ANM218453_20131015.mat'... 
    'data_structure_ANM218453_20131016.mat'... 
    'data_structure_ANM218453_20131017.mat'... 
    'data_structure_ANM218453_20131018.mat'... 
    'data_structure_ANM218457_20131003.mat'... 
    'data_structure_ANM218457_20131004.mat'... 
    'data_structure_ANM218457_20131005.mat'...
    'data_structure_ANM218457_20131006.mat'...
    'data_structure_ANM218457_20131007.mat'...
    'data_structure_ANM218457_20131008.mat'...
    'data_structure_ANM218693_20131203.mat'...
    'data_structure_ANM218693_20131204.mat'... 
    'data_structure_ANM218693_20131205.mat'... 
    'data_structure_ANM219030_20130829.mat'... 
    'data_structure_ANM219030_20130830.mat'... 
    'data_structure_ANM219030_20130831.mat'...
    'data_structure_ANM219030_20130901.mat'... 
    'data_structure_ANM219030_20130903.mat'... 
    'data_structure_ANM219031_20131021.mat'... 
    'data_structure_ANM219031_20131022.mat'...
    'data_structure_ANM219031_20131023.mat'... 
    'data_structure_ANM219031_20131024.mat'...
    'data_structure_ANM219031_20131025.mat'...
    'data_structure_ANM219033_20131116.mat'...
    'data_structure_ANM219033_20131117.mat'...
    'data_structure_ANM219033_20131118.mat'...
    'data_structure_ANM219033_20131119.mat'...
    'data_structure_ANM219033_20131120.mat'...
    'data_structure_ANM219033_20131121.mat'...
    'data_structure_ANM219033_20131122.mat'... 
    'data_structure_ANM219036_20131116.mat'... 
    'data_structure_ANM219036_20131117.mat'...
    'data_structure_ANM219036_20131118.mat'... 
    'data_structure_ANM219036_20131119.mat'...
    'data_structure_ANM219036_20131120.mat'...
    'data_structure_ANM219036_20131121.mat'...
    'data_structure_ANM219036_20131122.mat'... 
    'data_structure_ANM219037_20131116.mat'... 
    'data_structure_ANM219037_20131117.mat'... 
    'data_structure_ANM219037_20131118.mat'... 
    'data_structure_ANM219037_20131119.mat'... 
    'data_structure_ANM219037_20131120.mat'...
    'data_structure_ANM219037_20131121.mat'...
    'data_structure_ANM219037_20131122.mat'... 
    'data_structure_ANM219038_20131021.mat'...
    'data_structure_ANM219038_20131022.mat'... 
    'data_structure_ANM219038_20131023.mat'...
    'data_structure_ANM219038_20131024.mat'...
    'data_structure_ANM219038_20131025.mat'... 
    'data_structure_ANM219038_20131026.mat'...
    'data_structure_ANM219038_20131027.mat'...
    'data_structure_ANM219038_20131028.mat'...
    'data_structure_ANM219247_20130919.mat'... 
    'data_structure_ANM219247_20130920.mat'...
    'data_structure_ANM219247_20130921.mat'... 
    'data_structure_ANM219247_20130922.mat'...
    'data_structure_ANM219247_20130923.mat'...
    'data_structure_ANM219248_20130919.mat'... 
    'data_structure_ANM219248_20130920.mat'... 
    'data_structure_ANM219248_20130921.mat'...
    'data_structure_ANM219248_20130922.mat'...
    'data_structure_ANM219248_20130923.mat'...
    'data_structure_ANM219248_20130924.mat'... 
    'data_structure_ANM219248_20130925.mat'...
    'data_structure_ANM219253_20140117.mat'...
    'data_structure_ANM219253_20140118a.mat'...
    'data_structure_ANM219253_20140118b.mat'...
    'data_structure_ANM219253_20140119a.mat'... 
    'data_structure_ANM219253_20140119b.mat'... 
    'data_structure_ANM219253_20140120a.mat'... 
    'data_structure_ANM219253_20140120b.mat'... 
    'data_structure_ANM219253_20140121a.mat'... 
    'data_structure_ANM219253_20140121b.mat'...
    'data_structure_ANM219253_20140122.mat'...
    'data_structure_ANM221977_20140115.mat'...
    'data_structure_ANM221977_20140116.mat'...
    'data_structure_ANM221977_20140118.mat'};

% Sample 2D array (eg. for one cell type)
% [unit1: [fA nA pA wTP wPT isi reg b wvfrm(29)]
%  unit2: [fA nA pA wTP wPT isi reg b wvfrm(29)]
%  ..........................
%  unitN: [fA nA pA wTP wPT isi reg b wvfrm(29)]]

% Initialize and pre-allocate matrices for each cell type
FS = zeros(1438875, 37);
PT = zeros(319584, 37);
IT = zeros(126470, 37);
countFS = 0;
countPT = 0;
countIT = 0;

% Create arrays with features by cell type
for file = 1:length(FileNames)
    fprintf('Loading ' + string(FileNames(file)) + '\n')
    load(string(FileNames(file)))
% Number of cells in this data structure
for x = 1:length(obj.eventSeriesHash.value)
    % Access the number of single units/spikes in each individual cell
   for y = 1:length(obj.eventSeriesHash.value{1,x}.waveforms)
       % Baseline waveforms
       baseline = mean(obj.eventSeriesHash.value{1,x}.waveforms(y,1:10));
       for z = 1:29
           obj.eventSeriesHash.value{1,x}.waveforms(y,z) = obj.eventSeriesHash.value{1,x}.waveforms(y,z) - baseline;
       end
       % Add waveform unit to the appropriate matrix and calculate features
        if any(~cellfun('isempty',strfind(obj.eventSeriesHash.value{1,x}.cellType, 'FS'))) == 1
            countFS = countFS + 1;
            FS(countFS, 1) = fullAmplitude(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            FS(countFS, 2) = negAmplitude(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            FS(countFS, 3) = posAmplitude(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            FS(countFS, 4) = widthTP(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            FS(countFS, 5) = widthPT(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            isiArr = interspike(obj.eventSeriesHash.value{1,x}.eventTimes);
            FS(countFS, 6) = isiArr(y);
            regArr = regularity(isiArr);
            FS(countFS, 7) = regArr(y); 
            eT_len = length(obj.eventSeriesHash.value{1,x}.eventTimes);
            FS(countFS, 8) = burstiness(isiArr, eT_len);
            for ind = 9:37
                FS(countFS, ind) = obj.eventSeriesHash.value{1,x}.waveforms(y,ind - 8); 
            end
        elseif any(~cellfun('isempty',strfind(obj.eventSeriesHash.value{1,x}.cellType, 'PT'))) == 1
            PT(countPT, 1) = fullAmplitude(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            PT(countPT, 2) = negAmplitude(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            PT(countPT, 3) = posAmplitude(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            PT(countPT, 4) = widthTP(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            PT(countPT, 5) = widthPT(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            isiArr = interspike(obj.eventSeriesHash.value{1,x}.eventTimes);
            PT(countPT, 6) = isiArr(y);
            regArr = regularity(isiArr);
            PT(countPT, 7) = regArr(y);
            eT_len = length(obj.eventSeriesHash.value{1,x}.eventTimes);
            PT(countPT, 8) = burstiness(isiArr, eT_len);
            for ind = 9:37
                PT(countPT, ind) = obj.eventSeriesHash.value{1,x}.waveforms(y,ind - 8); 
            end
        elseif any(~cellfun('isempty',strfind(obj.eventSeriesHash.value{1,x}.cellType, 'FS'))) == 1
            countIT = countIT + 1;
            IT(countIT, 1) = fullAmplitude(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            IT(countIT, 2) = negAmplitude(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            IT(countIT, 3) = posAmplitude(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            IT(countIT, 4) = widthTP(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            IT(countIT, 5) = widthPT(obj.eventSeriesHash.value{1,x}.waveforms(y,:));
            isiArr = interspike(obj.eventSeriesHash.value{1,x}.eventTimes);
            IT(countIT, 6) = isiArr(y);
            regArr = regularity(isiArr);
            IT(countIT, 7) = regArr(y);
            eT_len = length(obj.eventSeriesHash.value{1,x}.eventTimes);
            IT(countIT, 8) = burstiness(isiArr, eT_len);
            for ind = 9:37
                IT(countIT, ind) = obj.eventSeriesHash.value{1,x}.waveforms(y,ind - 8); 
            end
        end
    end
end
end

% Individual functions for calculating each feature:

% Full amplitude - Maximum - minimum
function fA = fullAmplitude(w)
    minVal = min(w);
    maxVal = max(w);
    fA = maxVal - minVal;
end
% Negative amplitude - 0 - minimum
function nA = negAmplitude(w)
    minVal = min(w);
    nA = 0 - minVal;
end

% Positive amplitude - Max - 0
function pA = posAmplitude(w)    
    maxVal = max(w);
    pA = maxVal;
end
% Recovery time - Distance from trough to first peak after trough
function wTP = widthTP(w)
    minVal = min(w);
    minInd = find(w == minVal);
    wNew = w(minInd:29);
    maxVal = max(wNew);
    maxInd = find(w == maxVal);
    wTP = maxInd - minInd;
end
% Spike time - Distance from initial peak to trough
function wPT = widthPT(w)
    minVal = min(w);
    minInd = find(w == minVal);
    wNew = w(1:minInd);
    maxVal = max(wNew);
    maxInd = find(w == maxVal);
    wPT = minInd - maxInd;
end
% Interspike interval - Time between consecutive spikes
function isi = interspike(eT)
    %look at diff between spike times, threshold 2.5; ISI array same size
    %as waveforms
    diffET = zeros(1,110000);
    for time = 1:length(eT)-1
        diffET(time) = eT(time + 1) - eT(time);
        if diffET(time) > 2.5 %threshold value
            diffET(time) = 0;
        end
    end
    diffET(length(eT)) = mean(diffET);
    isi = diffET; %array of ISIs, one per row
end
% Regularity - variance of the ratio between consecutive ISIs
function reg = regularity(isiArray)
    ratios = zeros(1,110000);
    for isiN = 1:length(isiArray)-1
        ratios(isiN) = (((isiArray(isiN)) / (isiArray(isiN+1) + isiArray(isiN))) - 0.5)^2;
    end
    ratios(length(isiArray)) = mean(ratios);
    reg = ratios;
end
  
    
% Burstiness - the number of ISIs that are less than a tenth of the mean,
%   implying a burst
function b = burstiness(isiArray2, eT_len)
    %fraction of ISIs less than a tenth of the average ISI
    count = 0;
    meanISI = mean(isiArray2(1:eT_len));
    for indISI = 1:length(isiArray2(1:eT_len))
        if (isiArray2(indISI) ~= 0) && (isiArray2(indISI) < (0.1 * meanISI))
            count = count + 1;
        end
    end
    b = count;
end